name: Publish Projects

on:
  push:
    tags:
      - "v*"

jobs:
  publish_wit:
    name: "Publish WIT"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Caches
      - name: Cache Git submodules
        id: cache-submodules
        uses: actions/cache@v4
        with:
          path: submodules
          key: ${{ runner.os }}-submodules-${{ hashFiles('.gitmodules') }}

      - name: Checkout submodules
        if: steps.cache-submodules.outputs.cache-hit != 'true'
        run: git submodule update --init --recursive

      - name: Cache Forge build
        id: cache-forge
        uses: actions/cache@v4
        with:
          path: abi
          key: ${{ runner.os }}-forge-${{ hashFiles('.gitmodules', 'bun.lock') }}

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Target
        uses: actions/cache@v4
        with:
          path: |
            target/
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock', 'projects/*/component/Cargo.toml','projects/*/component/src/**/*.rs') }}

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.bun/install/global
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}

      - name: Install Foundry
        if: steps.cache-forge.outputs.cache-hit != 'true'
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install Bun
        if: steps.cache-forge.outputs.cache-hit != 'true'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-wasip1
          override: true

      - name: Install cargo binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install cargo component
        run: cargo binstall cargo-component

      - name: Install wkg
        run: cargo binstall wkg

      - name: Setup wkg
        run: wkg config --default-registry wa.dev

      - name: Setup dependencies
        run: task setup-ci BUILD_ABI=${{ steps.cache-forge.outputs.cache-hit != 'true' }}

      - name: Setup environment
        run: cp .env.example .env

      # Publish components
      - name: Create warg config directory and write config.json and authentication flat-files
        env: # https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#example-using-bash
          WA_DEV_AUTH_TOKEN: ${{ secrets.WA_DEV_AUTH_TOKEN }}
          WA_DEV_SIGNING_KEY: ${{ secrets.WA_DEV_SIGNING_KEY }}
        # wkg cannot set the warg configuration for authentication at this time.
        # This is a workaround to set the warg configuration without installing the `warg-cli`.
        run: |
          cat > wkg-config.toml << EOF
          default_registry = "wavs.wa.dev"

          [registry."wavs.wa.dev".warg]
          auth_token = "$WA_DEV_AUTH_TOKEN"
          signing_key = "$WA_DEV_SIGNING_KEY"
          EOF

      - name: Publish components
        run: task publish VERSION="${GITHUB_REF_NAME#v}" FLAGS="--config wkg-config.toml"
