name: Tests
on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  issue_comment:
    types: [created]

jobs:
  tests:
    name: "Run Tests"
    runs-on: linux-8-core
    permissions:
      contents: read
      issues: write
      pull-requests: write
    if: >
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '!test-report'))

    steps:
      # Checkout
      - name: Checkout (PR Comment)
        if: github.event_name == 'issue_comment'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/pull/${{ github.event.issue.number }}/head

      - name: Checkout (Push/PR)
        if: github.event_name != 'issue_comment'
        uses: actions/checkout@v4

      # Caches
      - name: Cache Git submodules
        id: cache-submodules
        uses: actions/cache@v4
        with:
          path: submodules
          key: ${{ runner.os }}-submodules-${{ hashFiles('.gitmodules') }}

      - name: Checkout submodules
        if: steps.cache-submodules.outputs.cache-hit != 'true'
        run: git submodule update --init --recursive

      - name: Cache Forge build
        id: cache-forge
        uses: actions/cache@v4
        with:
          path: abi
          key: ${{ runner.os }}-forge-${{ hashFiles('.gitmodules', 'package-lock.json') }}

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache operator-updater component
        uses: actions/cache@v4
        with:
          path: |
            projects/operator-updater/component/target/
            projects/operator-updater/.project-output/components/
          key: ${{ runner.os }}-operator-updater-${{ hashFiles('projects/operator-updater/component/**/*.rs', 'projects/operator-updater/component/Cargo.toml', 'Cargo.lock') }}

      - name: Cache multi-chain-operator-sync component
        uses: actions/cache@v4
        with:
          path: |
            projects/multi-chain-operator-sync/component/target/
            projects/multi-chain-operator-sync/.project-output/components/
          key: ${{ runner.os }}-multi-chain-operator-sync-${{ hashFiles('projects/multi-chain-operator-sync/component/**/*.rs', 'projects/multi-chain-operator-sync/component/Cargo.toml', 'Cargo.lock') }}

      - name: Cache multi-chain-quorum-sync component
        uses: actions/cache@v4
        with:
          path: |
            projects/multi-chain-quorum-sync/component/target/
            projects/multi-chain-quorum-sync/.project-output/components/
          key: ${{ runner.os }}-multi-chain-quorum-sync-${{ hashFiles('projects/multi-chain-quorum-sync/component/**/*.rs', 'projects/multi-chain-quorum-sync/component/Cargo.toml', 'Cargo.lock') }}

      - name: Cache wavs-drand component
        uses: actions/cache@v4
        with:
          path: |
            projects/wavs-drand/component/target/
            projects/wavs-drand/.project-output/components/
          key: ${{ runner.os }}-wavs-drand-${{ hashFiles('projects/wavs-drand/component/**/*.rs', 'projects/wavs-drand/component/Cargo.toml', 'Cargo.lock') }}

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Cache Test Node modules
        uses: actions/cache@v4
        with:
          path: tests/node_modules
          key: ${{ runner.os }}-tests-node-${{ hashFiles('tests/package-lock.json') }}

      - name: Cache Docker images
        id: cache-docker
        uses: actions/cache@v4
        with:
          path: /tmp/docker-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('taskfile/docker.yml') }}

      - name: Load cached Docker images
        if: steps.cache-docker.outputs.cache-hit == 'true'
        run: |
          if [ -d "/tmp/docker-cache" ]; then
            for image in /tmp/docker-cache/*.tar; do
              if [ -f "$image" ]; then
                echo "Loading cached image: $image"
                docker load -i "$image"
              fi
            done
          fi

      - name: Pull and cache Docker images
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: |
          # Extract image versions from docker config
          WAVS_IMAGE=$(grep 'WAVS_DOCKER_IMAGE:' taskfile/docker.yml | cut -d'"' -f2)
          FOUNDRY_IMAGE=$(grep 'FOUNDRY_DOCKER_IMAGE:' taskfile/docker.yml | cut -d'"' -f2)
          MIDDLEWARE_IMAGE=$(grep 'MIDDLEWARE_DOCKER_IMAGE:' taskfile/docker.yml | cut -d'"' -f2)
          JAEGER_IMAGE=$(grep 'JAEGER_DOCKER_IMAGE:' taskfile/docker.yml | cut -d'"' -f2)
          PROMETHEUS_IMAGE=$(grep 'PROMETHEUS_DOCKER_IMAGE:' taskfile/docker.yml | cut -d'"' -f2)

          # Create cache directory
          mkdir -p /tmp/docker-cache

          # Pull and save images
          echo "Pulling and caching Docker images..."
          docker pull $WAVS_IMAGE
          docker pull $FOUNDRY_IMAGE  
          docker pull $MIDDLEWARE_IMAGE
          docker pull $JAEGER_IMAGE
          docker pull $PROMETHEUS_IMAGE

          # Save images to cache
          docker save $WAVS_IMAGE -o /tmp/docker-cache/wavs.tar
          docker save $FOUNDRY_IMAGE -o /tmp/docker-cache/foundry.tar
          docker save $MIDDLEWARE_IMAGE -o /tmp/docker-cache/middleware.tar
          docker save $JAEGER_IMAGE -o /tmp/docker-cache/jaeger.tar
          docker save $PROMETHEUS_IMAGE -o /tmp/docker-cache/prometheus.tar

      # Tool installations
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-wasip1
          override: true

      - name: Install cargo binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install cargo component
        run: cargo binstall cargo-component

      - name: Install wkg
        run: cargo binstall wkg

      - name: Setup wkg
        run: wkg config --default-registry wa.dev

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # Dependencies and environment
      - name: Setup dependencies
        run: task setup-ci BUILD_ABI=${{ steps.cache-forge.outputs.cache-hit != 'true' }}

      - name: Setup environment
        run: cp .env.example .env

      # Tests
      - name: Run tests and generate report
        id: tests
        run: npm run test:report
        working-directory: tests
        continue-on-error: true

      # Results processing
      - name: Check if we should comment
        id: should-comment
        run: |
          SHOULD_COMMENT="false"

          # Always comment if triggered by !test-report comment
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            SHOULD_COMMENT="true"
            echo "Commenting due to !test-report trigger"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            if [ "${{ github.event.pull_request.draft }}" = "false" ]; then
              # Non-draft PR: only comment if there are test failures
              if [ -f tests/.test-reports/merged-report.json ]; then
                failures=$(node ./.github/scripts/collect-failures.js)
                if [ "$failures" -gt "0" ]; then
                  SHOULD_COMMENT="true"
                  echo "Commenting due to test failures in non-draft PR"
                else
                  echo "No test failures in non-draft PR, skipping comment"
                fi
              fi
            else
              echo "Draft PR, skipping comment (only !test-report trigger allowed)"
            fi
          fi

          echo "should_comment=$SHOULD_COMMENT" >> $GITHUB_OUTPUT

      - name: Comment with test results
        uses: actions/github-script@v7
        if: steps.should-comment.outputs.should_comment == 'true'
        with:
          script: |
            const { commentTestResults } = require('./.github/scripts/comment-test-results.js');
            await commentTestResults({ github, context });

      - name: Check test results and fail if needed
        if: always()
        run: |
          if [ -f tests/.test-reports/merged-report.json ]; then
            failures=$(node ./.github/scripts/collect-failures.js)
            if [ "$failures" -gt "0" ]; then
              echo "Tests failed: $failures failure(s) found"
              exit 1
            else
              echo "All tests passed"
            fi
          else
            echo "Test report not found, assuming failure"
            exit 1
          fi
