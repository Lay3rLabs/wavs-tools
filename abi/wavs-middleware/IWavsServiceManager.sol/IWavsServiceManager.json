{"abi":[{"type":"function","name":"getAllocationManager","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getRegistryCoordinator","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getServiceURI","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"getStakeRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setQuorumThreshold","inputs":[{"name":"numerator","type":"uint256","internalType":"uint256"},{"name":"denominator","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setServiceURI","inputs":[{"name":"_serviceURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"QuorumThresholdUpdated","inputs":[{"name":"numerator","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"denominator","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ServiceURIUpdated","inputs":[{"name":"serviceURI","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"error","name":"InvalidQuorumParameters","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getAllocationManager()":"a28efd6b","getRegistryCoordinator()":"82684272","getServiceURI()":"cc922c6a","getStakeRegistry()":"bef4c839","setQuorumThreshold(uint256,uint256)":"dbdc82c3","setServiceURI(string)":"5f11301b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidQuorumParameters\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"QuorumThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serviceURI\",\"type\":\"string\"}],\"name\":\"ServiceURIUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAllocationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistryCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setQuorumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_serviceURI\",\"type\":\"string\"}],\"name\":\"setServiceURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Lay3r Labs\",\"details\":\"This interface defines the functions and events for the WavsServiceManager contract\",\"events\":{\"QuorumThresholdUpdated(uint256,uint256)\":{\"params\":{\"denominator\":\"The denominator of the quorum threshold\",\"numerator\":\"The numerator of the quorum threshold\"}},\"ServiceURIUpdated(string)\":{\"params\":{\"serviceURI\":\"The service URI\"}}},\"kind\":\"dev\",\"methods\":{\"getAllocationManager()\":{\"returns\":{\"_0\":\"The address of the allocation manager.\"}},\"getRegistryCoordinator()\":{\"returns\":{\"_0\":\"The address of the registry coordinator.\"}},\"getServiceURI()\":{\"returns\":{\"_0\":\"The service URI.\"}},\"getStakeRegistry()\":{\"returns\":{\"_0\":\"The address of the stake registry.\"}},\"setQuorumThreshold(uint256,uint256)\":{\"details\":\"The fraction numerator/denominator represents the minimum portion of stake      required for a valid signature (e.g., 2/3 or 51/100)\",\"params\":{\"denominator\":\"The denominator of the quorum fraction\",\"numerator\":\"The numerator of the quorum fraction\"}},\"setServiceURI(string)\":{\"params\":{\"_serviceURI\":\"The service URI to update.\"}}},\"title\":\"IWavsServiceManager\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidQuorumParameters()\":[{\"notice\":\"The error for the invalid quorum parameters.\"}]},\"events\":{\"QuorumThresholdUpdated(uint256,uint256)\":{\"notice\":\"Event emitted when the quorum threshold is updated\"},\"ServiceURIUpdated(string)\":{\"notice\":\"Event emitted when the service URI is updated\"}},\"kind\":\"user\",\"methods\":{\"getAllocationManager()\":{\"notice\":\"Returns the address of the allocation manager.\"},\"getRegistryCoordinator()\":{\"notice\":\"Returns the address of the registry coordinator.\"},\"getServiceURI()\":{\"notice\":\"Returns the service URI.\"},\"getStakeRegistry()\":{\"notice\":\"Returns the address of the stake registry.\"},\"setQuorumThreshold(uint256,uint256)\":{\"notice\":\"Sets a new quorum threshold for signature validation\"},\"setServiceURI(string)\":{\"notice\":\"Updates the service URI.\"}},\"notice\":\"Interface for the WavsServiceManager contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/eigenlayer/bls/interfaces/IWavsServiceManager.sol\":\"IWavsServiceManager\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[\":@eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer-scripts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/script/\",\":@eigenlayer/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"src/eigenlayer/bls/interfaces/IWavsServiceManager.sol\":{\"keccak256\":\"0xd72589466019b7326166119ceb45455c726444b3e248aa27161f3d91eb74af72\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://4451437c4fb13cc419e589c8d5e7ea521828e10f3444a094c02702aa9794ec99\",\"dweb:/ipfs/QmXzJQvncx8ghi2GZLkF17FzS9FdjqMofMtcEfGHNSq7WS\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"InvalidQuorumParameters"},{"inputs":[{"internalType":"uint256","name":"numerator","type":"uint256","indexed":true},{"internalType":"uint256","name":"denominator","type":"uint256","indexed":true}],"type":"event","name":"QuorumThresholdUpdated","anonymous":false},{"inputs":[{"internalType":"string","name":"serviceURI","type":"string","indexed":false}],"type":"event","name":"ServiceURIUpdated","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"getAllocationManager","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getRegistryCoordinator","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getServiceURI","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getStakeRegistry","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"numerator","type":"uint256"},{"internalType":"uint256","name":"denominator","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setQuorumThreshold"},{"inputs":[{"internalType":"string","name":"_serviceURI","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"setServiceURI"}],"devdoc":{"kind":"dev","methods":{"getAllocationManager()":{"returns":{"_0":"The address of the allocation manager."}},"getRegistryCoordinator()":{"returns":{"_0":"The address of the registry coordinator."}},"getServiceURI()":{"returns":{"_0":"The service URI."}},"getStakeRegistry()":{"returns":{"_0":"The address of the stake registry."}},"setQuorumThreshold(uint256,uint256)":{"details":"The fraction numerator/denominator represents the minimum portion of stake      required for a valid signature (e.g., 2/3 or 51/100)","params":{"denominator":"The denominator of the quorum fraction","numerator":"The numerator of the quorum fraction"}},"setServiceURI(string)":{"params":{"_serviceURI":"The service URI to update."}}},"version":1},"userdoc":{"kind":"user","methods":{"getAllocationManager()":{"notice":"Returns the address of the allocation manager."},"getRegistryCoordinator()":{"notice":"Returns the address of the registry coordinator."},"getServiceURI()":{"notice":"Returns the service URI."},"getStakeRegistry()":{"notice":"Returns the address of the stake registry."},"setQuorumThreshold(uint256,uint256)":{"notice":"Sets a new quorum threshold for signature validation"},"setServiceURI(string)":{"notice":"Updates the service URI."}},"version":1}},"settings":{"remappings":["@eigenlayer-middleware/=lib/eigenlayer-middleware/","@eigenlayer-scripts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/script/","@eigenlayer/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/","@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","@openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/","eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/","eigenlayer-middleware/=lib/eigenlayer-middleware/","erc4626-tests/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/","openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/","zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/"],"optimizer":{"enabled":true,"runs":100},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/eigenlayer/bls/interfaces/IWavsServiceManager.sol":"IWavsServiceManager"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"src/eigenlayer/bls/interfaces/IWavsServiceManager.sol":{"keccak256":"0xd72589466019b7326166119ceb45455c726444b3e248aa27161f3d91eb74af72","urls":["bzz-raw://4451437c4fb13cc419e589c8d5e7ea521828e10f3444a094c02702aa9794ec99","dweb:/ipfs/QmXzJQvncx8ghi2GZLkF17FzS9FdjqMofMtcEfGHNSq7WS"],"license":"UNLICENSED"}},"version":1},"id":163}