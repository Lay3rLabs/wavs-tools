version: "3"

dotenv: [".env"]

vars:
  COMPONENTS_DIR: "./compiled"
  DOCKER_SUDO:
    sh: |
      if groups | grep -q docker; then echo ""; else echo "sudo"; fi

includes:
  avs_sync: ./tools/avs_sync/Taskfile.yml

tasks:
  start:
    desc: "Starts anvil and core services (like IPFS for example)"
    deps: [clean-docker, setup-env]
    cmds:
      - sh ./script/start_all.sh

  clean-docker:
    desc: "Remove unused docker containers"
    cmds:
      - |
        {{.DOCKER_SUDO}} docker stop $({{.DOCKER_SUDO}} docker ps -q) 2>/dev/null || true

  setup-env:
    desc: "Create the .env file from .env.example if not yet created"
    cmds:
      - |
        [ -f .env ] || cp .env.example .env

  wavs-middleware:
    desc: Run any wavs middleware command
    vars:
      MIDDLEWARE_DOCKER_IMAGE: "ghcr.io/lay3rlabs/wavs-middleware:0.4.0-rc"
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host --env-file .env
        $(if [ -n "${WAVS_SERVICE_MANAGER_ADDRESS}" ]; then echo "-e WAVS_SERVICE_MANAGER_ADDRESS=${WAVS_SERVICE_MANAGER_ADDRESS}"; fi)
        $(if [ -n "${PAST_BLOCKS}" ]; then echo "-e PAST_BLOCKS=${PAST_BLOCKS}"; fi)
        -v ./.nodes:/root/.nodes {{.MIDDLEWARE_DOCKER_IMAGE}} {{.CLI_ARGS}}
    env:
      WAVS_SERVICE_MANAGER_ADDRESS: '{{env "WAVS_SERVICE_MANAGER_ADDRESS"}}'
      PAST_BLOCKS: '{{default "500" (env "PAST_BLOCKS")}}'

  wavs-cli:
    desc: Run any wavs cli command
    vars:
      WAVS_DOCKER_IMAGE: "ghcr.io/lay3rlabs/wavs:0.4.0-rc"
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -w /data -v $(pwd):/data {{.WAVS_DOCKER_IMAGE}}
        wavs-cli {{.CLI_ARGS}}

  upload-to-ipfs:
    desc: "Upload service file to IPFS (local or via Pinata depending on deploy status)"
    cmds:
      - >
        if [ "$(sh script/get-deploy-status.sh)" = "LOCAL" ]; then
          curl -X POST "http://127.0.0.1:5001/api/v0/add?pin=true" \
            -H "Content-Type: multipart/form-data" \
            -F file=@${SERVICE_FILE} | jq -r .Hash;
        else
          if [ -z "${PINATA_API_KEY}" ]; then
            echo "Error: PINATA_API_KEY is not set. Please set it to your Pinata API key -- https://app.pinata.cloud/developers/api-keys.";
            exit 1;
          fi;
          curl -X POST --url https://uploads.pinata.cloud/v3/files \
            --header "Authorization: Bearer ${PINATA_API_KEY}" \
            --header "Content-Type: multipart/form-data" \
            --form file=@${SERVICE_FILE} \
            --form network=public \
            --form name=service-$(date +"%b-%d-%Y").json | jq -r .data.cid;
        fi

  stop:
    desc: "Stop Anvil and Docker services started"
    cmds:
      - docker compose -f docker-compose.yml -f telemetry/docker-compose.yml down --remove-orphans
      - pkill -f "anvil --fork-url" || true

  dos2unix:
    cmds:
      - dos2unix ./script/*
      - find ./script/template -type f -exec dos2unix {} \;
      - dos2unix ./tools/avs_sync/script/*
