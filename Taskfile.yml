version: "3"

vars:
  COMPONENTS_DIR: "./components"
  WAVS_DOCKER_IMAGE: "ghcr.io/lay3rlabs/wavs:0.4.0-rc"
  MIDDLEWARE_DOCKER_IMAGE: "ghcr.io/lay3rlabs/wavs-middleware:0.4.0-rc"
  DOCKER_SUDO:
    sh: |
      if groups | grep -q docker; then echo ""; else echo "sudo"; fi

includes:
  avs_sync: ./avs_sync/Taskfile.yml

tasks:
  start:
    desc: "Starts anvil and core services (like IPFS for example)"
    deps: [clean-docker, setup-env]
    cmds:
      - sh ./script/start_all.sh

  setup:
    desc: "Setup the middleware contracts"
    cmds:
      - source ./script/create-deployer.sh
      - task wavs-middleware -- deploy

  clean-docker:
    desc: "Remove unused docker containers"
    cmds:
      - |
        {{.DOCKER_SUDO}} docker stop $({{.DOCKER_SUDO}} docker ps -q) 2>/dev/null || true

  setup-env:
    desc: "Create the .env file from .env.example if not yet created"
    cmds:
      - |
        [ -f .env ] || cp .env.example .env

  wavs-middleware:
    desc: Run any wavs middleware command
    cmds:
      - |
        {{.DOCKER_SUDO}} docker run --rm --network host --env-file .env \
        $(if [ -n "${WAVS_SERVICE_MANAGER_ADDRESS}" ]; then echo "-e WAVS_SERVICE_MANAGER_ADDRESS=${WAVS_SERVICE_MANAGER_ADDRESS}"; fi) \
        $(if [ -n "${PAST_BLOCKS}" ]; then echo "-e PAST_BLOCKS=${PAST_BLOCKS}"; fi) \
        -v ./.nodes:/root/.nodes {{.MIDDLEWARE_DOCKER_IMAGE}} {{.CLI_ARGS}}
    env:
      WAVS_SERVICE_MANAGER_ADDRESS: '{{env "WAVS_SERVICE_MANAGER_ADDRESS"}}'
      PAST_BLOCKS: '{{default "500" (env "PAST_BLOCKS")}}'

  wavs-cli:
    desc: Run any wavs cli command
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        --env-file .env -v {{.PWD}}:/data {{.WAVS_DOCKER_IMAGE}}
        wavs-cli {{.CLI_ARGS}}
