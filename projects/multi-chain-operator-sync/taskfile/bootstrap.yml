version: "3"

includes:
  bootstrap-common:
    taskfile: ../../../taskfile/common/bootstrap.yml
    flatten: true
  mirror-common:
    taskfile: ../../../taskfile/common/mirror.yml
    flatten: true

tasks:
  build-service:
    desc: "Build service configuration"
    vars:
      SERVICE_JSON_CMD: 'service --json true --home /wavs-home --file "{{.WAVS_CLI_SERVICE_JSON_PATH}}"'
      SOURCE_CHAIN:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-chain-name-{{.SOURCE_CHAIN_NUMBER}}
      COMPONENT_DIGEST:
        sh: task get-component-digest
      SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address
      STAKE_REGISTRY_ADDRESS:
        sh: task get-stake-registry-address
    cmds:
      - task: build-register-workflow
        vars:
          SERVICE_JSON_CMD: "{{.SERVICE_JSON_CMD}}"
          SOURCE_CHAIN: "{{.SOURCE_CHAIN}}"
          STAKE_REGISTRY_ADDRESS: "{{.STAKE_REGISTRY_ADDRESS}}"
          COMPONENT_DIGEST: "{{.COMPONENT_DIGEST}}"
      - task: build-deregister-workflow
        vars:
          SERVICE_JSON_CMD: "{{.SERVICE_JSON_CMD}}"
          SOURCE_CHAIN: "{{.SOURCE_CHAIN}}"
          STAKE_REGISTRY_ADDRESS: "{{.STAKE_REGISTRY_ADDRESS}}"
          COMPONENT_DIGEST: "{{.COMPONENT_DIGEST}}"
      - task: build-update-workflow
        vars:
          SERVICE_JSON_CMD: "{{.SERVICE_JSON_CMD}}"
          SOURCE_CHAIN: "{{.SOURCE_CHAIN}}"
          STAKE_REGISTRY_ADDRESS: "{{.STAKE_REGISTRY_ADDRESS}}"
          COMPONENT_DIGEST: "{{.COMPONENT_DIGEST}}"
          SERVICE_MANAGER_ADDRESS: "{{.SERVICE_MANAGER_ADDRESS}}"

  build-register-workflow:
    desc: "Configure and register a workflow"
    requires:
      vars:
        [
          SERVICE_JSON_CMD,
          SOURCE_CHAIN,
          STAKE_REGISTRY_ADDRESS,
          COMPONENT_DIGEST,
        ]
    vars:
      OPERATOR_REGISTERED_EVENT_HASH:
        sh: cast keccak "OperatorRegistered(address,address)"
      WORKFLOW_ID:
        sh: cd "{{.REPO_ROOT}}" && task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow add --id register | jq -r .workflow_id
    cmds:
      - |
        cd "{{.REPO_ROOT}}"
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow trigger --id {{.WORKFLOW_ID}} set-evm --chain-name {{.SOURCE_CHAIN}} --address {{.STAKE_REGISTRY_ADDRESS}} --event-hash {{.OPERATOR_REGISTERED_EVENT_HASH}}

      - |
        for i in $(seq 1 {{.ACTIVE_CHAIN_COUNT}}); do
          if [ "$i" -ne {{.SOURCE_CHAIN_NUMBER}} ]; then
            task bootstrap:build-submit-$i SERVICE_JSON_CMD="{{.SERVICE_JSON_CMD}}" WORKFLOW_ID="{{.WORKFLOW_ID}}"
          fi
        done

      - |
        cd "{{.REPO_ROOT}}"
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow component --id {{.WORKFLOW_ID}} set-source-digest --digest {{.COMPONENT_DIGEST}}
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow component --id {{.WORKFLOW_ID}} permissions --http-hosts '*' --file-system true

        echo "Workflow registered"

  build-deregister-workflow:
    desc: "Configure and register a workflow"
    requires:
      vars:
        [
          SERVICE_JSON_CMD,
          SOURCE_CHAIN,
          STAKE_REGISTRY_ADDRESS,
          COMPONENT_DIGEST,
        ]
    vars:
      OPERATOR_DEREGISTERED_EVENT_HASH:
        sh: cast keccak "OperatorDeregistered(address,address)"
      WORKFLOW_ID:
        sh: cd "{{.REPO_ROOT}}" && task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow add --id deregister | jq -r .workflow_id
    cmds:
      - |
        cd "{{.REPO_ROOT}}"
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow trigger --id {{.WORKFLOW_ID}} set-evm --chain-name {{.SOURCE_CHAIN}} --address {{.STAKE_REGISTRY_ADDRESS}} --event-hash {{.OPERATOR_DEREGISTERED_EVENT_HASH}}

      - |
        for i in $(seq 1 {{.ACTIVE_CHAIN_COUNT}}); do
          if [ "$i" -ne {{.SOURCE_CHAIN_NUMBER}} ]; then
            task bootstrap:build-submit-$i SERVICE_JSON_CMD="{{.SERVICE_JSON_CMD}}" WORKFLOW_ID="{{.WORKFLOW_ID}}"
          fi
        done

      - |
        cd "{{.REPO_ROOT}}"
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow component --id {{.WORKFLOW_ID}} set-source-digest --digest {{.COMPONENT_DIGEST}}
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow component --id {{.WORKFLOW_ID}} permissions --http-hosts '*' --file-system true

        echo "Workflow registered"

  build-update-workflow:
    desc: "Configure and register a workflow"
    requires:
      vars:
        [
          SERVICE_JSON_CMD,
          SOURCE_CHAIN,
          STAKE_REGISTRY_ADDRESS,
          COMPONENT_DIGEST,
          SERVICE_MANAGER_ADDRESS,
        ]
    vars:
      WORKFLOW_ID:
        sh: cd "{{.REPO_ROOT}}" && task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow add --id update | jq -r .workflow_id
    cmds:
      - |
        cd "{{.REPO_ROOT}}"
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow trigger --id {{.WORKFLOW_ID}} set-block-interval --chain-name {{.SOURCE_CHAIN}} --n-blocks {{.UPDATE_INTERVAL_BLOCKS}}

      - |
        for i in $(seq 1 {{.ACTIVE_CHAIN_COUNT}}); do
          if [ "$i" -ne {{.SOURCE_CHAIN_NUMBER}} ]; then
            task bootstrap:build-submit-$i SERVICE_JSON_CMD="{{.SERVICE_JSON_CMD}}" WORKFLOW_ID="{{.WORKFLOW_ID}}"
          fi
        done

      - |
        cd "{{.REPO_ROOT}}"
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow component --id {{.WORKFLOW_ID}} set-source-digest --digest {{.COMPONENT_DIGEST}}
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow component --id {{.WORKFLOW_ID}} permissions --http-hosts '*' --file-system true

        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow component --id {{.WORKFLOW_ID}} config --values "service_manager_address={{.SERVICE_MANAGER_ADDRESS}}"

        echo "Workflow registered"

  build-submit-*:
    desc: "Submit workflow for a specific chain"
    requires:
      vars: [SERVICE_JSON_CMD, WORKFLOW_ID]
    vars:
      CHAIN_NUMBER: "{{index .MATCH 0}}"
      CHAIN_NAME:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-chain-name-{{.CHAIN_NUMBER}}
      SUBMISSION_ADDRESS:
        sh: task get-submission-address-{{.CHAIN_NUMBER}}
    cmds:
      - |
        cd "{{.REPO_ROOT}}"

        if [ "{{.CHAIN_NUMBER}}" -eq 2 ]; then
          task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow submit --id {{.WORKFLOW_ID}} set-aggregator --url {{.WAVS_AGGREGATOR_ENDPOINT}} --address "{{.SUBMISSION_ADDRESS}}" --chain-name "{{.CHAIN_NAME}}"
        else
          task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow submit --id {{.WORKFLOW_ID}} add-aggregator --url {{.WAVS_AGGREGATOR_ENDPOINT}} --address "{{.SUBMISSION_ADDRESS}}" --chain-name "{{.CHAIN_NAME}}"
        fi

  deploy-service-*:
    vars:
      WAVS_INSTANCE: "{{index .MATCH 0}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
      TEMP_SERVICE_HASH:
        sh: task get-temp-service-hash
      SOURCE_WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-1
      SERVICE_URI: "{{.SOURCE_WAVS_ENDPOINT}}/service-by-hash/{{.TEMP_SERVICE_HASH}}"
    cmds:
      - task cli:wavs WAVS_INSTANCE={{.WAVS_INSTANCE}} -- deploy-service --home /wavs-home --service-url {{.SERVICE_URI}} --wavs-endpoint {{.WAVS_ENDPOINT}}

  wavs-*:
    vars:
      WAVS_INSTANCE: "{{index .MATCH 0}}"
    cmds:
      - task bootstrap:components-upload WAVS_INSTANCE="{{.WAVS_INSTANCE}}"
      - task bootstrap:deploy-service-{{.WAVS_INSTANCE}}
      - task bootstrap:register-operator WAVS_INSTANCE="{{.WAVS_INSTANCE}}"
