version: "3"

tasks:
  components-build:
    desc: "Builds the WASI components for AVS Sync"
    deps: [components-clean]
    vars:
      COMPONENT_SOURCE_DIR: '{{joinPath .ROOT_DIR "component"}}'
    cmds:
      - cd "{{.REPO_ROOT}}" && task component:build PROJECT="{{.PROJECT}}" COMPONENT_NAME="{{.COMPONENT_NAME}}" COMPONENT_SOURCE_DIR="{{.COMPONENT_SOURCE_DIR}}"

  components-clean:
    desc: "Deletes the WASI components for AVS Sync"
    cmds:
      - cd "{{.REPO_ROOT}}" && task component:clean-all PROJECT="{{.PROJECT}}" COMPONENT_NAME="{{.COMPONENT_NAME}}"

  components-upload:
    desc: "Uploads the WASI components for AVS Sync"
    cmds:
      - cd "{{.REPO_ROOT}}" && task component:upload PROJECT="{{.PROJECT}}" COMPONENT_NAME="{{.COMPONENT_NAME}}"

  middleware-deploy:
    desc: "Deploys the middleware"
    cmds:
      - cd "{{.REPO_ROOT}}" && task middleware:deploy PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}"

  mirror-deploy:
    desc: "Deploys the mirror contracts for all chains"
    cmds:
      - |
        if [ {{.CHAIN_COUNT}} -lt 2 ]; then
          echo "Error: CHAIN_COUNT must be 2 or greater"
          exit 1
        fi

        for i in $(seq 2 {{.CHAIN_COUNT}}); do
          task bootstrap:mirror-deploy-$i
        done

  mirror-deploy-*:
    desc: "Deploys the mirror contracts for a chain"
    vars:
      CHAIN_NUMBER: "{{index .MATCH 0}}"
      WAVS_SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address
      SOURCE_RPC_URL:
        sh: task get-source-rpc-url
      MIRROR_RPC_URL:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
    cmds:
      - >
        cd "{{.REPO_ROOT}}" && task middleware:deploy-mirror
        CHAIN_NUMBER="{{.CHAIN_NUMBER}}"
        PROJECT="{{.PROJECT}}" 
        SERVICE_NAME="{{.PROJECT}}" 
        MODE="mirror" 
        SOURCE_RPC_URL="{{.SOURCE_RPC_URL}}" 
        MIRROR_RPC_URL="{{.MIRROR_RPC_URL}}" 
        WAVS_SERVICE_MANAGER_ADDRESS="{{.WAVS_SERVICE_MANAGER_ADDRESS}}"

  get-submission-address-*:
    desc: "Gets the submission address for a chain"
    vars:
      CHAIN_NUMBER: "{{index .MATCH 0}}"
      OUT_DIR:
        sh: cd {{.REPO_ROOT}} && task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.PROJECT}}
    cmds:
      - |
        FILE=$(find {{.OUT_DIR}} -name "mirror-*.json" | head -n 1)
        if [ -z "$FILE" ]; then
          echo "Error: No mirror-*.json file found in {{.OUT_DIR}}"
          exit 1
        fi
        jq -r '.addresses.MirrorServiceHandler' "$FILE"

  build-service:
    desc: "Build service configuration"
    deps: [clean-service]
    vars:
      CMD: 'service --json true --home /wavs-home --file "{{.WAVS_CLI_SERVICE_JSON_PATH}}"'
      SOURCE_CHAIN:
        sh: cd {{.REPO_ROOT}} && task backend:get-chain-name-1
      COMPONENT_DIGEST:
        sh: task get-component-digest
      SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address
      STAKE_REGISTRY_ADDRESS:
        sh: task get-stake-registry-address
      OPERATOR_REGISTERED_EVENT_HASH:
        sh: cast keccak "OperatorRegistered(address,address)"
    cmds:
      - |
        cd "{{.REPO_ROOT}}"
        mkdir -p {{.SERVICE_OUTPUT_DIR}}

        # Build service configuration using task cli:wavs
        SERVICE_ID=$(task cli:wavs -- {{.CMD}} init --name {{.COMPONENT_NAME}} | jq -r .service.id)

        WORKFLOW_ID=$(task cli:wavs -- {{.CMD}} workflow add | jq -r .workflow_id)

        # Configure workflow
        task cli:wavs -- {{.CMD}} workflow trigger --id ${WORKFLOW_ID} set-evm --chain-name {{.SOURCE_CHAIN}} --address {{.STAKE_REGISTRY_ADDRESS}} --event-hash {{.OPERATOR_REGISTERED_EVENT_HASH}} > /dev/null

        for i in $(seq 2 {{.CHAIN_COUNT}}); do
          CHAIN_NAME=$(task backend:get-chain-name-$i)
          cd {{.ROOT_DIR}}
          SUBMISSION_ADDRESS=$(task bootstrap:get-submission-address-$i)
          cd {{.REPO_ROOT}}

          if [ "$i" -eq 2 ]; then
            task cli:wavs -- {{.CMD}} workflow submit --id ${WORKFLOW_ID} set-aggregator --url {{.WAVS_AGGREGATOR_ENDPOINT}} --address "$SUBMISSION_ADDRESS" --chain-name "$CHAIN_NAME" > /dev/null
          else
            task cli:wavs -- {{.CMD}} workflow submit --id ${WORKFLOW_ID} add-aggregator --url {{.WAVS_AGGREGATOR_ENDPOINT}} --address "$SUBMISSION_ADDRESS" --chain-name "$CHAIN_NAME" > /dev/null
          fi
        done

        task cli:wavs -- {{.CMD}} workflow component --id ${WORKFLOW_ID} set-source-digest --digest {{.COMPONENT_DIGEST}} > /dev/null
          
        task cli:wavs -- {{.CMD}} workflow component --id ${WORKFLOW_ID} permissions --http-hosts '*' --file-system true > /dev/null
          
        task cli:wavs -- {{.CMD}} manager set-evm --chain-name {{.SOURCE_CHAIN}} --address {{.SERVICE_MANAGER_ADDRESS}} > /dev/null

        echo "Service configuration built successfully"

  clean-service:
    desc: "Cleans up the service configuration"
    cmds:
      - rm -rf "{{.SERVICE_OUTPUT_DIR}}"

  upload-service:
    cmds:
      - |
        curl -X POST "{{.WAVS_ENDPOINT}}/save-service" -H "Content-Type: application/json" --data-binary "@{{.SERVICE_JSON_PATH}}"

  set-service-uri:
    vars:
      SERVICE_ID:
        sh: task get-service-id
      SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address
      EVM_RPC_URL:
        sh: task get-source-rpc-url
      SERVICE_URI: "{{.WAVS_ENDPOINT}}/service/{{.SERVICE_ID}}"
    cmds:
      - |
        cast send {{.SERVICE_MANAGER_ADDRESS}} 'setServiceURI(string)' "{{.SERVICE_URI}}" -r {{.EVM_RPC_URL}} --private-key ${DEPLOYER_PRIVATE_KEY}

  register-service-uri:
    vars:
      SERVICE_ID:
        sh: task get-service-id
      SERVICE_URI: "{{.WAVS_ENDPOINT}}/service/{{.SERVICE_ID}}"
    cmds:
      - |
        curl -X POST "{{.WAVS_AGGREGATOR_ENDPOINT}}/register-service" -H "Content-Type: application/json" -d "{\"uri\": \"{{.SERVICE_URI}}\"}"

  deploy-service:
    vars:
      SERVICE_ID:
        sh: task get-service-id
      SERVICE_URI: "{{.WAVS_ENDPOINT}}/service/{{.SERVICE_ID}}"
    cmds:
      - task cli:wavs -- deploy-service --home /wavs-home --service-url {{.SERVICE_URI}} --wavs-endpoint {{.WAVS_ENDPOINT}}

  register-operator:
    vars:
      AVS_SIGNING_ADDRESS:
        sh: task get-service-signing-address
    cmds:
      - |
        cd "{{.REPO_ROOT}}" && task middleware:register-operator AVS_SIGNING_ADDRESS="{{.AVS_SIGNING_ADDRESS}}" AMOUNT="0.001ether" PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}"
