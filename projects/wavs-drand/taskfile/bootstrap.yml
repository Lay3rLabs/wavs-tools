version: "3"

includes:
  bootstrap-common:
    taskfile: ../../../taskfile/common/bootstrap.yml
    flatten: true
  mirror-common:
    taskfile: ../../../taskfile/common/mirror.yml
    flatten: true

tasks:
  contracts-deploy:
    desc: "Deploys the solidity contracts"
    dir: contracts
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      SCRIPT_NAME: "DeployRandomnessContracts"
      EVM_RPC_URL:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
    env:
      SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address CHAIN_NUMBER={{.CHAIN_NUMBER}}
    cmds:
      - |
        case "{{.DEPLOY_ENV}}" in
          "TESTNET")
            forge script script/{{.SUBMISSION_DEPLOY_SCRIPT}}:{{.SCRIPT_NAME}} --broadcast --rpc-url "{{.EVM_RPC_URL}}" --verify
            ;;
          *)
            forge script script/{{.SUBMISSION_DEPLOY_SCRIPT}}:{{.SCRIPT_NAME}} --broadcast --rpc-url "{{.EVM_RPC_URL}}"
            ;;
        esac

  build-service:
    desc: "Build service configuration"
    deps: [clean-service]
    vars:
      SERVICE_JSON_CMD: "{{.SERVICE_JSON_CMD}}"
      TRIGGER_CHAIN:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-chain-name-1
      SUBMIT_CHAIN:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-chain-name-1
      COMPONENT_DIGEST:
        sh: task get-component-digest
      AGGREGATOR_COMPONENT_DIGEST:
        sh: task get-component-digest COMPONENT="{{.AGGREGATOR_COMPONENT_NAME}}"
      AGGREGATOR_COMPONENT_CONFIG:
        sh: task bootstrap:get-aggregator-config-values AGGREGATOR_PROJECT="{{.AGGREGATOR_PROJECT}}"
      SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address
      TRIGGER_ADDRESS:
        sh: task get-trigger-address
      SUBMISSION_ADDRESS:
        sh: task get-submission-address
      RANDOMNESS_REQUESTED_EVENT_HASH:
        sh: cast keccak "RandomnessRequested(uint256)"
    cmds:
      - |
        cd "{{.REPO_ROOT}}"
        mkdir -p {{.SERVICE_OUTPUT_DIR}}

        # Build service configuration using task cli:wavs
        task cli:wavs -- {{.SERVICE_JSON_CMD}} init --name {{.COMPONENT_NAME}}

        WORKFLOW_ID=$(task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow add | jq -r .workflow_id)

        # Configure workflow
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow trigger --id ${WORKFLOW_ID} set-evm --chain {{.TRIGGER_CHAIN}} --address {{.TRIGGER_ADDRESS}} --event-hash {{.RANDOMNESS_REQUESTED_EVENT_HASH}}
          
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow submit --id ${WORKFLOW_ID} set-aggregator --url {{.WAVS_AGGREGATOR_ENDPOINT}}
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow submit --id ${WORKFLOW_ID} component set-source-digest --digest {{.AGGREGATOR_COMPONENT_DIGEST}}
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow submit --id ${WORKFLOW_ID} component config {{.AGGREGATOR_COMPONENT_CONFIG}}
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow submit --id ${WORKFLOW_ID} component permissions --http-hosts '*' --file-system true

        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow component --id ${WORKFLOW_ID} set-source-digest --digest {{.COMPONENT_DIGEST}}
          
        task cli:wavs -- {{.SERVICE_JSON_CMD}} workflow component --id ${WORKFLOW_ID} permissions --http-hosts '*' --file-system true
          
        task cli:wavs -- {{.SERVICE_JSON_CMD}} manager set-evm --chain {{.SUBMIT_CHAIN}} --address {{.SERVICE_MANAGER_ADDRESS}}

        echo "Service configuration built successfully"
