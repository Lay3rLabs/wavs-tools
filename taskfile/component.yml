version: "3"

includes:
  config:
    taskfile: ./config.yml
    flatten: true
  docker:
    taskfile: ./docker.yml
    flatten: true

tasks:
  build:
    desc: "Build a WASI component from Rust source"
    vars:
      COMPONENT_OUTPUT_DIR:
        sh: task component:get-output-dir PROJECT={{.PROJECT}}
    requires:
      vars: [PROJECT, COMPONENT_NAME, COMPONENT_SOURCE_DIR]
    preconditions:
      - test -d "{{.COMPONENT_SOURCE_DIR}}"
      - test -f "{{.COMPONENT_SOURCE_DIR}}/Cargo.toml"
      - sh: "command -v cargo"
        msg: "Rust cargo is required but not installed"
      - sh: "cargo component --version"
        msg: "cargo-component is required but not installed"
    sources:
      - "{{.COMPONENT_SOURCE_DIR}}/src/**/*.rs"
      - "{{.COMPONENT_SOURCE_DIR}}/Cargo.toml"
    generates:
      - "{{.COMPONENT_OUTPUT_DIR}}/{{.COMPONENT_NAME}}.wasm"
    cmds:
      - |
        echo "Building component: {{.COMPONENT_NAME}} for {{.PROJECT}}"
        cd "{{.COMPONENT_SOURCE_DIR}}"
        cargo component build --release
        mkdir -p {{.COMPONENT_OUTPUT_DIR}}
        cp "{{.COMPONENTS_CARGO_RELEASE_DIR}}/{{.COMPONENT_NAME}}.wasm" {{.COMPONENT_OUTPUT_DIR}}/

  clean-single:
    desc: "Delete a specific WASI component binary"
    vars:
      COMPONENT_OUTPUT_DIR:
        sh: task component:get-output-dir PROJECT={{.PROJECT}}
    requires:
      vars: [PROJECT, COMPONENT_NAME]
    cmds:
      - rm -f "{{.COMPONENT_OUTPUT_DIR}}/{{.COMPONENT_NAME}}.wasm"

  clean-all:
    desc: "Delete all WASI component binaries for a project"
    vars:
      COMPONENT_OUTPUT_DIR:
        sh: task component:get-output-dir PROJECT={{.PROJECT}}
    requires:
      vars: [PROJECT]
    cmds:
      - rm -rf "{{.COMPONENT_OUTPUT_DIR}}"

  upload:
    desc: "Upload a WASI component to WAVS endpoint"
    requires:
      vars: [PROJECT, COMPONENT_NAME, WAVS_ENDPOINT]
    vars:
      # here it's relative to docker volume mount, where /wavs-tools is the root of this repo
      COMPONENT_BINARY: "/wavs-tools/projects/{{.PROJECT}}/{{.PROJECT_OUTPUT_DIRNAME}}/components/{{.COMPONENT_NAME}}.wasm"
      DATA_DIR: "/wavs-tools/projects/{{.PROJECT}}/{{.PROJECT_OUTPUT_DIRNAME}}/.wavs-cli-data"
      COMPONENT_DIGEST_FILE:
        sh: task component:get-digest-filepath PROJECT={{.PROJECT}} COMPONENT_NAME={{.COMPONENT_NAME}}
    cmds:
      # unfortunately, the wavs-cli upload-component command doesn't write to JSON
      # but, fortunately, the last line of the output is the digest
      - |
        OUTPUT=$(task component:docker-upload WAVS_ENDPOINT="{{.WAVS_ENDPOINT}}" -- "{{.COMPONENT_BINARY}}" --data "{{.DATA_DIR}}")
        DIGEST=$(echo "$OUTPUT" | tail -n 1)
        if [[ "$OUTPUT" == *"Digest"* ]]; then
          echo "Component uploaded successfully, digest is $DIGEST"
          echo "$DIGEST" > "{{.COMPONENT_DIGEST_FILE}}"
        else
          echo "Failed to upload component."
          exit 1
        fi

  docker-upload:
    desc: "Upload component via Docker container"
    requires:
      vars: [WAVS_ENDPOINT]
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -v {{.REPO_ROOT}}:/wavs-tools
        -v {{.WAVS_HOME_DIR}}:/wavs-home 
        {{.WAVS_DOCKER_IMAGE}}
        wavs-cli upload-component {{.CLI_ARGS}} --json true --home /wavs-home --wavs-endpoint {{.WAVS_ENDPOINT}}

  get-output-dir:
    desc: "Get the path to the component output directory"
    vars:
      OUTPUT_DIR: '{{joinPath .REPO_ROOT "projects" .PROJECT .PROJECT_OUTPUT_DIRNAME "components"}}'
    requires:
      vars: [PROJECT]
    cmds:
      - echo "{{.OUTPUT_DIR}}"

  get-digest-filepath:
    desc: "Get the path to the component digest file"
    vars:
      OUTPUT_DIR:
        sh: task component:get-output-dir PROJECT={{.PROJECT}}
    requires:
      vars: [PROJECT, COMPONENT_NAME]
    cmds:
      - echo "{{.OUTPUT_DIR}}/{{.COMPONENT_NAME}}.digest"
