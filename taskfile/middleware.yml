version: "3"

includes:
  config:
    taskfile: ./config.yml
    flatten: true
  docker:
    taskfile: ./docker.yml
    flatten: true
  backend: ./backend.yml

tasks:
  deploy:
    desc: "Deploy middleware for a given service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    deps:
      - task: clean
        vars:
          PROJECT: "{{.PROJECT}}"
          SERVICE_NAME: "{{.SERVICE_NAME}}"
          CHAIN_NUMBER: "{{.CHAIN_NUMBER}}"
    requires:
      vars: [PROJECT, SERVICE_NAME]
    env:
      LOCAL_ETHEREUM_RPC_URL:
        sh: task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      DEPLOY_ENV:
        sh: task middleware:get-middleware-deploy-env
      METADATA_URI: "{{.MIDDLEWARE_METADATA_URI}}"
      LST_CONTRACT_ADDRESS: "{{.MIDDLEWARE_LST_CONTRACT_ADDRESS}}"
      LST_STRATEGY_ADDRESS: "{{.MIDDLEWARE_LST_STRATEGY_ADDRESS}}"
      CHAIN_ID: "{{.MIDDLEWARE_CHAIN_ID}}"
      FUNDED_KEY:
        sh: "echo $MIDDLEWARE_FUNDED_KEY"
      ETHERSCAN_API_KEY:
        sh: "echo $MIDDLEWARE_ETHERSCAN_API_KEY"
    cmds:
      - mkdir -p {{.NODES_DIR}}
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e FUNDED_KEY 
        -e ETHERSCAN_API_KEY 
        -e DEPLOY_ENV
        -e LOCAL_ETHEREUM_RPC_URL
        -e METADATA_URI 
        -e LST_CONTRACT_ADDRESS 
        -e LST_STRATEGY_ADDRESS
        -e CHAIN_ID 
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} deploy

  deploy-mock:
    desc: "Deploy mock middleware for a given service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      MOCK_CONFIG_PATH: "{{.NODES_DIR}}/mock_config.json"
    deps:
      - task: clean
        vars:
          PROJECT: "{{.PROJECT}}"
          SERVICE_NAME: "{{.SERVICE_NAME}}"
          CHAIN_NUMBER: "{{.CHAIN_NUMBER}}"
    requires:
      vars: [PROJECT, SERVICE_NAME]
    env:
      MOCK_RPC_URL:
        sh: task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      DEPLOY_ENV:
        sh: task middleware:get-middleware-deploy-env
      MOCK_DEPLOYER_KEY:
        sh: "echo $MIDDLEWARE_FUNDED_KEY"
    cmds:
      - mkdir -p {{.NODES_DIR}}
      - |
        echo '{"operators": [], "signingKeyAddresses": [], "weights": [], "threshold": 100, "quorumNumerator": 2, "quorumDenominator": 3}' > "{{.MOCK_CONFIG_PATH}}"
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e MOCK_DEPLOYER_KEY 
        -e DEPLOY_ENV
        -e MOCK_RPC_URL
        -v {{.NODES_DIR}}:/root/.nodes
        -v {{.MOCK_CONFIG_PATH}}:/wavs/contracts/deployments/wavs-mock-config.json
        {{.MIDDLEWARE_DOCKER_IMAGE}} -m mock deploy
      - mv {{.NODES_DIR}}/mock.json {{.NODES_DIR}}/avs_deploy.json

  deploy-mirror:
    desc: "Deploy mirror contracts for a given service"
    deps:
      - task: clean
        vars:
          PROJECT: "{{.PROJECT}}"
          SERVICE_NAME: "{{.SERVICE_NAME}}"
          CHAIN_NUMBER: "{{.CHAIN_NUMBER}}"
    vars:
      NODES_DIR:
        sh: task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME, CHAIN_NUMBER]
    env:
      DEPLOY_ENV:
        sh: task middleware:get-middleware-deploy-env
      SOURCE_RPC_URL: "{{.SOURCE_RPC_URL}}"
      MIRROR_RPC_URL: "{{.MIRROR_RPC_URL}}"
      WAVS_SERVICE_MANAGER_ADDRESS:
        sh: task middleware:get-service-manager-address PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.SERVICE_NAME}}"
      FUNDED_KEY: "{{.MIDDLEWARE_FUNDED_KEY}}"
      ETHERSCAN_API_KEY:
        sh: "echo $MIDDLEWARE_ETHERSCAN_API_KEY"
    cmds:
      - mkdir -p {{.NODES_DIR}}
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e DEPLOY_ENV
        -e ETHERSCAN_API_KEY 
        -e SOURCE_RPC_URL
        -e MIRROR_RPC_URL
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -e FUNDED_KEY
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} -m mirror deploy

  clean:
    desc: "Clean up middleware nodes directory for a given service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME]
    cmds:
      - |
        echo "Cleaning up middleware nodes directory: {{.NODES_DIR}}"
      - rm -rf {{.NODES_DIR}}

  register-operator:
    desc: "Register an operator on a given service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      WAVS_INSTANCE: '{{.WAVS_INSTANCE | default "1"}}'
      NODES_DIR:
        sh: task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      OPERATOR_MNEMONIC:
        sh: task backend:get-wavs-submission-mnemonic-{{.WAVS_INSTANCE}}
    requires:
      vars: [PROJECT, SERVICE_NAME, WAVS_SIGNING_KEY, AMOUNT]
    env:
      WAVS_SIGNING_KEY: "{{.WAVS_SIGNING_KEY}}"
      DEPLOY_ENV:
        sh: task middleware:get-middleware-deploy-env
      LOCAL_ETHEREUM_RPC_URL:
        sh: task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      LST_CONTRACT_ADDRESS: "{{.MIDDLEWARE_LST_CONTRACT_ADDRESS}}"
      LST_STRATEGY_ADDRESS: "{{.MIDDLEWARE_LST_STRATEGY_ADDRESS}}"
      CHAIN_ID: "{{.MIDDLEWARE_CHAIN_ID}}"
      ETHERSCAN_API_KEY:
        sh: "echo $MIDDLEWARE_ETHERSCAN_API_KEY"
      WAVS_SERVICE_MANAGER_ADDRESS:
        sh: task middleware:get-service-manager-address CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      OPERATOR_KEY:
        sh: cast wallet private-key --mnemonic "{{.OPERATOR_MNEMONIC}}" --mnemonic-index 0
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e DEPLOY_ENV
        -e ETHERSCAN_API_KEY 
        -e LOCAL_ETHEREUM_RPC_URL
        -e LST_CONTRACT_ADDRESS 
        -e LST_STRATEGY_ADDRESS
        -e CHAIN_ID 
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -e OPERATOR_KEY
        -e WAVS_SIGNING_KEY
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} register {{.AMOUNT}}

  set-operator-details:
    desc: "Set operator details using the stake registry setOperatorDetails function"
    vars:
      WEIGHT: "{{.WEIGHT | default 10000000}}"
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      WAVS_INSTANCE: '{{.WAVS_INSTANCE | default "1"}}'
      OPERATOR_MNEMONIC:
        sh: task backend:get-wavs-submission-mnemonic-{{.WAVS_INSTANCE}}
      OPERATOR_ADDRESS:
        sh: cast wallet address --mnemonic "{{.OPERATOR_MNEMONIC}}" --mnemonic-index 0
      EVM_RPC_URL:
        sh: task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      STAKE_REGISTRY_ADDRESS:
        sh: task middleware:get-stake-registry-address CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME, WAVS_SIGNING_KEY]
    cmds:
      - |
        echo "Setting operator details: operator={{.OPERATOR_ADDRESS}}, signingKey={{.WAVS_SIGNING_KEY}}, weight={{.WEIGHT}}"
        cast send {{.STAKE_REGISTRY_ADDRESS}} 'setOperatorDetails(address,address,uint256)' {{.OPERATOR_ADDRESS}} {{.WAVS_SIGNING_KEY}} {{.WEIGHT}} -r {{.EVM_RPC_URL}} --private-key ${DEPLOYER_PRIVATE_KEY}

  deregister-operator:
    desc: "Deregister an operator on a given service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      WAVS_INSTANCE: '{{.WAVS_INSTANCE | default "1"}}'
      NODES_DIR:
        sh: task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      OPERATOR_MNEMONIC:
        sh: task backend:get-wavs-submission-mnemonic-{{.WAVS_INSTANCE}}
    requires:
      vars: [PROJECT, SERVICE_NAME]
    env:
      DEPLOY_ENV:
        sh: task middleware:get-middleware-deploy-env
      LOCAL_ETHEREUM_RPC_URL:
        sh: task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      ETHERSCAN_API_KEY:
        sh: "echo $MIDDLEWARE_ETHERSCAN_API_KEY"
      WAVS_SERVICE_MANAGER_ADDRESS:
        sh: task middleware:get-service-manager-address CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      OPERATOR_KEY:
        sh: cast wallet private-key --mnemonic "{{.OPERATOR_MNEMONIC}}" --mnemonic-index 0
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e DEPLOY_ENV
        -e ETHERSCAN_API_KEY 
        -e LOCAL_ETHEREUM_RPC_URL
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -e OPERATOR_KEY
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} deregister

  update-quorum:
    desc: "Update quorum threshold for a service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME, QUORUM_DENOMINATOR, QUORUM_NUMERATOR]
    env:
      DEPLOY_ENV:
        sh: task middleware:get-middleware-deploy-env
      LOCAL_ETHEREUM_RPC_URL:
        sh: task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      ETHERSCAN_API_KEY:
        sh: "echo $MIDDLEWARE_ETHERSCAN_API_KEY"
      WAVS_SERVICE_MANAGER_ADDRESS:
        sh: task middleware:get-service-manager-address CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      QUORUM_DENOMINATOR: "{{.QUORUM_DENOMINATOR}}"
      QUORUM_NUMERATOR: "{{.QUORUM_NUMERATOR}}"
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e DEPLOY_ENV
        -e ETHERSCAN_API_KEY 
        -e LOCAL_ETHEREUM_RPC_URL
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -e QUORUM_DENOMINATOR
        -e QUORUM_NUMERATOR
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} update_quorum

  list-operators:
    desc: "List registered operators for a given service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: task middleware:get-output-dir PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME]
    env:
      DEPLOY_ENV:
        sh: task middleware:get-middleware-deploy-env
      ETHERSCAN_API_KEY: "{{.MIDDLEWARE_ETHERSCAN_API_KEY}}"
      LOCAL_ETHEREUM_RPC_URL:
        sh: task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      WAVS_SERVICE_MANAGER_ADDRESS:
        sh: task middleware:get-service-manager-address PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e DEPLOY_ENV
        -e LOCAL_ETHEREUM_RPC_URL
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -e ETHERSCAN_API_KEY
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} list_operators

  list-operators-mirror:
    desc: "List registered operators on a mirror for a given service"
    vars:
      SOURCE_CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: task middleware:get-output-dir PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME, MIRROR_CHAIN_NUMBER]
    env:
      DEPLOY_ENV:
        sh: task middleware:get-middleware-deploy-env
      ETHERSCAN_API_KEY: "{{.MIDDLEWARE_ETHERSCAN_API_KEY}}"
      SOURCE_RPC_URL:
        sh: task backend:get-evm-rpc-url-{{.SOURCE_CHAIN_NUMBER}}
      MIRROR_RPC_URL:
        sh: task backend:get-evm-rpc-url-{{.MIRROR_CHAIN_NUMBER}}
      SOURCE_SERVICE_MANAGER_ADDRESS:
        sh: task middleware:get-service-manager-address PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      MIRROR_SERVICE_MANAGER_ADDRESS:
        sh: task middleware:get-mirror-service-manager-address PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}} CHAIN_NUMBER={{.MIRROR_CHAIN_NUMBER}}
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e DEPLOY_ENV
        -e SOURCE_RPC_URL
        -e MIRROR_RPC_URL
        -e SOURCE_SERVICE_MANAGER_ADDRESS
        -e MIRROR_SERVICE_MANAGER_ADDRESS
        -e ETHERSCAN_API_KEY
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} -m mirror list_operators

  delegate-to-operator:
    desc: "Delegates an amount to an operator"
    requires:
      vars:
        [
          OPERATOR_ADDRESS,
          SERVICE_MANAGER_ADDRESS,
          DELEGATE_AMOUNT,
          PROJECT,
          SERVICE_NAME,
        ]
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: task middleware:get-output-dir PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    env:
      STAKER_KEY: "{{.DEPLOYER_PRIVATE_KEY}}"
      LOCAL_ETHEREUM_RPC_URL:
        sh: task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      OPERATOR_ADDRESS: "{{.OPERATOR_ADDRESS}}"
      WAVS_SERVICE_MANAGER_ADDRESS: "{{.SERVICE_MANAGER_ADDRESS}}"
      WAVS_DELEGATE_AMOUNT: "{{.DELEGATE_AMOUNT}}"
      LST_CONTRACT_ADDRESS: "{{.MIDDLEWARE_LST_CONTRACT_ADDRESS}}"
      LST_STRATEGY_ADDRESS: "{{.MIDDLEWARE_LST_STRATEGY_ADDRESS}}"
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e OPERATOR_ADDRESS
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -e WAVS_DELEGATE_AMOUNT
        -e LST_CONTRACT_ADDRESS
        -e LST_STRATEGY_ADDRESS
        -e LOCAL_ETHEREUM_RPC_URL
        -e STAKER_KEY
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} delegate_to_operator

  get-output-dir:
    desc: "Get the path to the middleware output directory"
    vars:
      CHAIN_NUMBER: "{{.CHAIN_NUMBER | default 1}}"
      CHAIN_DIRNAME: "chain-{{.CHAIN_NUMBER}}"
      OUTPUT_DIR: '{{joinPath .REPO_ROOT "projects" .PROJECT .PROJECT_OUTPUT_DIRNAME .CHAIN_DIRNAME .SERVICE_NAME}}'
    requires:
      vars: [PROJECT, SERVICE_NAME]
    cmds:
      - echo "{{.OUTPUT_DIR}}"

  get-json-filepath:
    desc: "Get the path to the middleware deploy JSON file"
    vars:
      CHAIN_NUMBER: "{{.CHAIN_NUMBER | default 1}}"
      CHAIN_DIRNAME: "chain-{{.CHAIN_NUMBER}}"
      OUTPUT_DIR:
        sh: task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME]
    cmds:
      - echo "{{.OUTPUT_DIR}}/avs_deploy.json"

  get-mirror-json-filepath:
    desc: "Get the path to the middleware mirror JSON file"
    vars:
      CHAIN_DIRNAME: "chain-{{.CHAIN_NUMBER}}"
      OUTPUT_DIR:
        sh: task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME, CHAIN_NUMBER]
    cmds:
      - echo "{{.OUTPUT_DIR}}/mirror.json"

  get-service-manager-address:
    desc: "Get the WAVS Service Manager address from the middleware deploy JSON file"
    vars:
      CHAIN_NUMBER: "{{.CHAIN_NUMBER | default 1}}"
      JSON_FILEPATH:
        sh: task middleware:get-json-filepath CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME]
    cmds:
      - sh -c 'jq -r ".addresses.WavsServiceManager // empty" "{{.JSON_FILEPATH}}" 2>/dev/null || true'

  get-stake-registry-address:
    desc: "Get the Stake Registry address from the middleware deploy JSON file"
    vars:
      CHAIN_NUMBER: "{{.CHAIN_NUMBER | default 1}}"
      JSON_FILEPATH:
        sh: task middleware:get-json-filepath CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME]
    cmds:
      - sh -c 'jq -r ".addresses.stakeRegistry // empty" "{{.JSON_FILEPATH}}" 2>/dev/null || true'

  get-mirror-stake-registry-address:
    desc: "Get the Mirror Stake Registry address from the middleware JSON file"
    vars:
      JSON_FILEPATH:
        sh: task middleware:get-mirror-json-filepath CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME, CHAIN_NUMBER]
    cmds:
      - sh -c 'jq -r ".addresses.stakeRegistry // empty" "{{.JSON_FILEPATH}}" 2>/dev/null || true'

  get-mirror-service-manager-address:
    desc: "Get the Mirror Service Manager address from the middleware JSON file"
    vars:
      JSON_FILEPATH:
        sh: task middleware:get-mirror-json-filepath CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME, CHAIN_NUMBER]
    cmds:
      - sh -c 'jq -r ".addresses.WavsServiceManager // empty" "{{.JSON_FILEPATH}}" 2>/dev/null || true'

  get-strategy-manager-address:
    desc: "Get the strategy manager address from the deployments JSON file"
    vars:
      CHAIN_ID: "{{.CHAIN_ID | default .MIDDLEWARE_CHAIN_ID}}"
    cmds:
      - sh -c 'jq -r ".addresses.strategyManager" "node_modules/@wavs/solidity/contracts/deployments/eigenlayer-core/{{.CHAIN_ID}}.json" 2>/dev/null || true'

  get-middleware-deploy-env:
    desc: "Get the DEPLOY_ENV value to pass to middleware (maps MOCK to LOCAL)"
    cmds:
      - echo '{{ if eq .DEPLOY_MODE "MOCK" }}LOCAL{{ else }}{{ .DEPLOY_MODE }}{{ end }}'
