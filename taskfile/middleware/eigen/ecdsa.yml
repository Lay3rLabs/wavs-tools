version: "3"

includes:
  utils:
    taskfile: ../utils.yml
    flatten: true

tasks:
  deploy:
    desc: "Deploy middleware for a given service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    deps:
      - task: clean
        vars:
          PROJECT: "{{.PROJECT}}"
          SERVICE_NAME: "{{.SERVICE_NAME}}"
          CHAIN_NUMBER: "{{.CHAIN_NUMBER}}"
    requires:
      vars: [PROJECT, SERVICE_NAME]
    env:
      RPC_URL:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      METADATA_URI: "{{.MIDDLEWARE_METADATA_URI}}"
      LST_CONTRACT_ADDRESS: "{{.MIDDLEWARE_LST_CONTRACT_ADDRESS}}"
      LST_STRATEGY_ADDRESS: "{{.MIDDLEWARE_LST_STRATEGY_ADDRESS}}"
      CHAIN_ID: "{{.MIDDLEWARE_CHAIN_ID}}"
      FUNDED_KEY: "{{.DEPLOYER_PRIVATE_KEY}}"
    cmds:
      - mkdir -p {{.NODES_DIR}}
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e FUNDED_KEY
        -e DEPLOY_ENV
        -e RPC_URL
        -e METADATA_URI
        -e LST_CONTRACT_ADDRESS
        -e LST_STRATEGY_ADDRESS
        -e CHAIN_ID
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} deploy

  register-operator:
    desc: "Register an operator on a given service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      WAVS_INSTANCE: '{{.WAVS_INSTANCE | default "1"}}'
      NODES_DIR:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      OPERATOR_MNEMONIC:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-submission-mnemonic-{{.WAVS_INSTANCE}}
    requires:
      vars: [PROJECT, SERVICE_NAME, WAVS_SIGNING_KEY, AMOUNT]
    env:
      WAVS_SIGNING_KEY: "{{.WAVS_SIGNING_KEY}}"
      RPC_URL:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      LST_CONTRACT_ADDRESS: "{{.MIDDLEWARE_LST_CONTRACT_ADDRESS}}"
      LST_STRATEGY_ADDRESS: "{{.MIDDLEWARE_LST_STRATEGY_ADDRESS}}"
      CHAIN_ID: "{{.MIDDLEWARE_CHAIN_ID}}"
      WAVS_SERVICE_MANAGER_ADDRESS:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-service-manager-address CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      OPERATOR_KEY:
        sh: cast wallet private-key --mnemonic "{{.OPERATOR_MNEMONIC}}" --mnemonic-index 0
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e DEPLOY_ENV
        -e RPC_URL
        -e LST_CONTRACT_ADDRESS
        -e LST_STRATEGY_ADDRESS
        -e CHAIN_ID
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -e OPERATOR_KEY
        -e WAVS_SIGNING_KEY
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} register {{.AMOUNT}}

  deregister-operator:
    desc: "Deregister an operator on a given service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      WAVS_INSTANCE: '{{.WAVS_INSTANCE | default "1"}}'
      NODES_DIR:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      OPERATOR_MNEMONIC:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-submission-mnemonic-{{.WAVS_INSTANCE}}
    requires:
      vars: [PROJECT, SERVICE_NAME]
    env:
      RPC_URL:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      WAVS_SERVICE_MANAGER_ADDRESS:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-service-manager-address CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      OPERATOR_KEY:
        sh: cast wallet private-key --mnemonic "{{.OPERATOR_MNEMONIC}}" --mnemonic-index 0
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e DEPLOY_ENV
        -e RPC_URL
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -e OPERATOR_KEY
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} deregister

  update-quorum:
    desc: "Update quorum threshold for a service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME, QUORUM_DENOMINATOR, QUORUM_NUMERATOR]
    env:
      RPC_URL:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      WAVS_SERVICE_MANAGER_ADDRESS:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-service-manager-address CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      QUORUM_DENOMINATOR: "{{.QUORUM_DENOMINATOR}}"
      QUORUM_NUMERATOR: "{{.QUORUM_NUMERATOR}}"
      FUNDED_KEY: "{{.DEPLOYER_PRIVATE_KEY}}"
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e DEPLOY_ENV
        -e RPC_URL
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -e QUORUM_DENOMINATOR
        -e QUORUM_NUMERATOR
        -e FUNDED_KEY
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} update_quorum

  list-operators:
    desc: "List registered operators for a given service"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-output-dir PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME]
    env:
      RPC_URL:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      WAVS_SERVICE_MANAGER_ADDRESS:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-service-manager-address PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e DEPLOY_ENV
        -e RPC_URL
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} list_operators

  delegate-to-operator:
    desc: "Delegates an amount to an operator"
    requires:
      vars:
        [
          OPERATOR_ADDRESS,
          SERVICE_MANAGER_ADDRESS,
          DELEGATE_AMOUNT,
          PROJECT,
          SERVICE_NAME,
        ]
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-output-dir PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    env:
      STAKER_KEY: "{{.DEPLOYER_PRIVATE_KEY}}"
      RPC_URL:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      OPERATOR_ADDRESS: "{{.OPERATOR_ADDRESS}}"
      WAVS_SERVICE_MANAGER_ADDRESS: "{{.SERVICE_MANAGER_ADDRESS}}"
      WAVS_DELEGATE_AMOUNT: "{{.DELEGATE_AMOUNT}}"
      LST_CONTRACT_ADDRESS: "{{.MIDDLEWARE_LST_CONTRACT_ADDRESS}}"
      LST_STRATEGY_ADDRESS: "{{.MIDDLEWARE_LST_STRATEGY_ADDRESS}}"
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e OPERATOR_ADDRESS
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -e WAVS_DELEGATE_AMOUNT
        -e LST_CONTRACT_ADDRESS
        -e LST_STRATEGY_ADDRESS
        -e RPC_URL
        -e STAKER_KEY
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} delegate_to_operator

  transfer-ownership:
    desc: "Transfer ownership of ECDSA proxy and AVS contracts"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
    requires:
      vars: [PROJECT, SERVICE_NAME, PROXY_OWNER, AVS_OWNER]
    env:
      RPC_URL:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-evm-rpc-url-{{.CHAIN_NUMBER}}
      WAVS_SERVICE_MANAGER_ADDRESS:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-service-manager-address CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.SERVICE_NAME}}
      PROXY_OWNER: "{{.PROXY_OWNER}}"
      AVS_OWNER: "{{.AVS_OWNER}}"
      FUNDED_KEY: "{{.DEPLOYER_PRIVATE_KEY}}"
    preconditions:
      - sh: cast to-checksum {{.AVS_OWNER}}
        msg: AVS_OWNER is not a valid address
      - sh: cast to-checksum {{.PROXY_OWNER}}
        msg: PROXY_OWNER is not a valid address
    cmds:
      - >
        {{.DOCKER_SUDO}} docker run --rm --network host
        -e DEPLOY_ENV
        -e RPC_URL
        -e WAVS_SERVICE_MANAGER_ADDRESS
        -e PROXY_OWNER
        -e AVS_OWNER
        -e FUNDED_KEY
        -v {{.NODES_DIR}}:/root/.nodes
        {{.MIDDLEWARE_DOCKER_IMAGE}} transfer_ownership
