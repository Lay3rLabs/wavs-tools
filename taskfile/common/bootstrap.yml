version: "3"

vars:
  # Common variable definitions
  SERVICE_JSON_CMD: 'service --json true --home /wavs-home --file "{{.WAVS_CLI_SERVICE_JSON_PATH}}"'

tasks:
  components-build:
    desc: "Builds the WASI components"
    deps: [components-clean]
    vars:
      COMPONENT_SOURCE_DIR: '{{joinPath .ROOT_DIR "component"}}'
    cmds:
      - cd "{{.REPO_ROOT}}" && task component:build PROJECT="{{.PROJECT}}" COMPONENT_NAME="{{.COMPONENT_NAME}}" COMPONENT_SOURCE_DIR="{{.COMPONENT_SOURCE_DIR}}"

  components-clean:
    desc: "Deletes the WASI components"
    cmds:
      - cd "{{.REPO_ROOT}}" && task component:clean-all PROJECT="{{.PROJECT}}" COMPONENT_NAME="{{.COMPONENT_NAME}}"

  components-upload:
    desc: "Uploads the WASI components"
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
    cmds:
      - cd "{{.REPO_ROOT}}" && task component:upload PROJECT="{{.PROJECT}}" COMPONENT_NAME="{{.COMPONENT_NAME}}" WAVS_ENDPOINT="{{.WAVS_ENDPOINT}}"

  middleware-deploy:
    desc: "Deploys the middleware (mock or real based on USES_MOCK setting)"
    vars:
      USES_MOCK: '{{.USES_MOCK | default "false"}}'
      CHAIN_ARG: '{{if .SOURCE_CHAIN_NUMBER}}CHAIN_NUMBER={{.SOURCE_CHAIN_NUMBER}}{{end}}'
    cmds:
      - |
        if [ "{{.USES_MOCK}}" = "true" ]; then
          cd "{{.REPO_ROOT}}" && task middleware:deploy-mock PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}" {{.CHAIN_ARG}}
        else
          cd "{{.REPO_ROOT}}" && task middleware:deploy PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}" {{.CHAIN_ARG}}
        fi

  build-mock-config:
    desc: "Build mock configuration JSON with all active operators"
    vars:
      WEIGHT: "{{.WEIGHT | default 10000000}}"
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      NODES_DIR:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-output-dir CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.PROJECT}}
      MOCK_CONFIG_PATH:
        sh: cd "{{.REPO_ROOT}}" && task middleware:get-mock-json-filepath CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.PROJECT}}
    requires:
      vars: [PROJECT]
    cmds:
      - |
        # Build arrays for all active operators
        OPERATORS_JSON="[]"
        SIGNING_KEYS_JSON="[]"
        WEIGHTS_JSON="[]"

        for WAVS_INSTANCE in $(seq 1 {{.ACTIVE_WAVS_COUNT}}); do
          OPERATOR_MNEMONIC=$(cd "{{.REPO_ROOT}}" && task backend:get-wavs-submission-mnemonic-$WAVS_INSTANCE)
          OPERATOR_ADDRESS=$(cast wallet address --mnemonic "$OPERATOR_MNEMONIC" --mnemonic-index 0)
          SIGNING_KEY=$(task get-service-signing-address WAVS_INSTANCE=$WAVS_INSTANCE)

          OPERATORS_JSON=$(echo "$OPERATORS_JSON" | jq ". + [\"$OPERATOR_ADDRESS\"]")
          SIGNING_KEYS_JSON=$(echo "$SIGNING_KEYS_JSON" | jq ". + [\"$SIGNING_KEY\"]")
          WEIGHTS_JSON=$(echo "$WEIGHTS_JSON" | jq ". + [{{.WEIGHT}}]")

          echo "Added operator $WAVS_INSTANCE: operator=$OPERATOR_ADDRESS, signingKey=$SIGNING_KEY, weight={{.WEIGHT}}"
        done

        # Create the mock config file JSON from scratch
        jq -n \
          --argjson operators "$OPERATORS_JSON" \
          --argjson signingKeys "$SIGNING_KEYS_JSON" \
          --argjson weights "$WEIGHTS_JSON" \
          --arg threshold "100" \
          --arg quorumNumerator "2" \
          --arg quorumDenominator "3" \
          '{
            operators: $operators,
            signingKeyAddresses: $signingKeys,
            weights: $weights,
            threshold: ($threshold | tonumber),
            quorumNumerator: ($quorumNumerator | tonumber),
            quorumDenominator: ($quorumDenominator | tonumber)
          }' > "{{.MOCK_CONFIG_PATH}}"

        echo "Mock config written to {{.MOCK_CONFIG_PATH}} with $(echo "$OPERATORS_JSON" | jq length) operators"

  build-empty-service:
    desc: "Build the empty service configuration"
    deps: [clean-service]
    vars:
      SERVICE_JSON_CMD: 'service --json true --home /wavs-home --file "{{.WAVS_CLI_SERVICE_JSON_PATH}}"'
      SOURCE_CHAIN:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-chain-name-{{.SOURCE_CHAIN_NUMBER}}
      SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address
    cmds:
      - |
        cd "{{.REPO_ROOT}}"
        mkdir -p {{.SERVICE_OUTPUT_DIR}}

        task cli:wavs -- {{.SERVICE_JSON_CMD}} init --name {{.COMPONENT_NAME}}

        task cli:wavs -- {{.SERVICE_JSON_CMD}} manager set-evm --chain-name {{.SOURCE_CHAIN}} --address {{.SERVICE_MANAGER_ADDRESS}}

        echo "Service configuration built successfully"

  clean-service:
    desc: "Cleans up the service configuration"
    cmds:
      - rm -rf "{{.SERVICE_OUTPUT_DIR}}"

  upload-service:
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
    cmds:
      - >
        curl --fail-with-body -X POST "{{.WAVS_ENDPOINT}}/save-service" 
        -H "Content-Type: application/json" 
        --data-binary "@{{.SERVICE_JSON_PATH}}"
        -o "{{.TEMP_SERVICE_HASH_JSON_PATH}}"

  set-service-uri:
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
      CHAIN_NUMBER: "{{.SOURCE_CHAIN_NUMBER | default 1}}"
      TEMP_SERVICE_HASH:
        sh: task get-temp-service-hash
      SERVICE_URI: "{{.WAVS_ENDPOINT}}/service-by-hash/{{.TEMP_SERVICE_HASH}}"
    cmds:
      - cd "{{.REPO_ROOT}}" && task middleware:set-service-uri CHAIN_NUMBER="{{.CHAIN_NUMBER}}" PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}" SERVICE_URI="{{.SERVICE_URI}}"

  register-service:
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
      SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address
      SOURCE_CHAIN_NUMBER: "{{.SOURCE_CHAIN_NUMBER | default 1}}"
      CHAIN_NAME:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-chain-name-{{.SOURCE_CHAIN_NUMBER}}
    cmds:
      - >
        curl --fail-with-body -X POST "{{.WAVS_AGGREGATOR_ENDPOINT}}/register-service" 
        -H "Content-Type: application/json" 
        -d "{
          \"service_manager\": {
            \"evm\": {
              \"chain_name\": \"{{.CHAIN_NAME}}\",
              \"address\": \"{{.SERVICE_MANAGER_ADDRESS}}\"
            }
          }
        }"

  deploy-service:
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
      TEMP_SERVICE_HASH:
        sh: task get-temp-service-hash
      SERVICE_URI: "{{.WAVS_ENDPOINT}}/service-by-hash/{{.TEMP_SERVICE_HASH}}"
    cmds:
      - task cli:wavs -- deploy-service --home /wavs-home --service-url {{.SERVICE_URI}} --wavs-endpoint {{.WAVS_ENDPOINT}}

  register-operator:
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_SIGNING_KEY:
        sh: task get-service-signing-address WAVS_INSTANCE="{{.WAVS_INSTANCE}}"
      USES_MOCK: '{{.USES_MOCK | default "false"}}'
    cmds:
      - |
        if [ "{{.USES_MOCK}}" = "true" ]; then
          task bootstrap:build-mock-config PROJECT="{{.PROJECT}}"
          cd "{{.REPO_ROOT}}" && task middleware:configure-mock PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}"
        else
          cd "{{.REPO_ROOT}}" && task middleware:register-operator WAVS_SIGNING_KEY="{{.WAVS_SIGNING_KEY}}" AMOUNT="0.001ether" PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}" WAVS_INSTANCE="{{.WAVS_INSTANCE}}"
        fi

  deploy-service-*:
    vars:
      WAVS_INSTANCE: "{{index .MATCH 0}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
      TEMP_SERVICE_HASH:
        sh: task get-temp-service-hash
      SOURCE_WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.SOURCE_CHAIN_NUMBER}}
      SERVICE_URI: "{{.SOURCE_WAVS_ENDPOINT}}/service-by-hash/{{.TEMP_SERVICE_HASH}}"
    cmds:
      - task cli:wavs WAVS_INSTANCE={{.WAVS_INSTANCE}} -- deploy-service --home /wavs-home --service-url {{.SERVICE_URI}} --wavs-endpoint {{.WAVS_ENDPOINT}}

  wavs-*:
    vars:
      WAVS_INSTANCE: "{{index .MATCH 0}}"
      USES_MOCK: '{{.USES_MOCK | default "false"}}'
    cmds:
      - task bootstrap:components-upload WAVS_INSTANCE="{{.WAVS_INSTANCE}}"
      - task bootstrap:deploy-service-{{.WAVS_INSTANCE}}
      - |
        if [ "{{.USES_MOCK}}" != "true" ]; then
          task bootstrap:register-operator WAVS_INSTANCE="{{.WAVS_INSTANCE}}"
        fi

  wavs-all:
    vars:
      FIRST_OPERATOR: "{{.FIRST_OPERATOR | default 1}}"
    cmds:
      - |
        for OPERATOR in $(seq 1 {{.ACTIVE_WAVS_COUNT}}); do
          if [ "$OPERATOR" -ne {{.FIRST_OPERATOR}} ]; then
            task bootstrap:wavs-$OPERATOR
          fi
        done
