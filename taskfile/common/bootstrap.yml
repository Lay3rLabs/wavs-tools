version: "3"

tasks:
  components-build:
    desc: "Builds the WASI components"
    deps: [components-clean]
    vars:
      COMPONENT_SOURCE_DIR: '{{joinPath .ROOT_DIR "component"}}'
    cmds:
      - cd "{{.REPO_ROOT}}" && task component:build PROJECT="{{.PROJECT}}" COMPONENT_NAME="{{.COMPONENT_NAME}}" COMPONENT_SOURCE_DIR="{{.COMPONENT_SOURCE_DIR}}"

  components-clean:
    desc: "Deletes the WASI components"
    cmds:
      - cd "{{.REPO_ROOT}}" && task component:clean-all PROJECT="{{.PROJECT}}" COMPONENT_NAME="{{.COMPONENT_NAME}}"

  components-upload:
    desc: "Uploads the WASI components"
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
    cmds:
      - cd "{{.REPO_ROOT}}" && task component:upload PROJECT="{{.PROJECT}}" COMPONENT_NAME="{{.COMPONENT_NAME}}" WAVS_ENDPOINT="{{.WAVS_ENDPOINT}}"

  get-deploy-mode:
    desc: "Gets the actual dpeloy mode for the project"
    vars:
      ACTUAL_DEPLOY_MODE: '{{.PROJECT_DEPLOY_MODE | default .DEPLOY_MODE | default "LOCAL"}}'
    cmds:
      - echo "{{.ACTUAL_DEPLOY_MODE}}"

  middleware-deploy:
    desc: "Deploys the middleware based on DEPLOY_MODE (projects may override internally)"
    vars:
      ACTUAL_DEPLOY_MODE:
        sh: task bootstrap:get-deploy-mode
    cmds:
      - |
        case "{{.ACTUAL_DEPLOY_MODE}}" in
          "LOCAL"|"TESTNET")
            if [ -n "{{.SOURCE_CHAIN_NUMBER}}" ]; then
              cd "{{.REPO_ROOT}}" && task middleware:deploy PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}" CHAIN_NUMBER="{{.SOURCE_CHAIN_NUMBER}}"
            else
              cd "{{.REPO_ROOT}}" && task middleware:deploy PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}"
            fi
            ;;
          "MOCK")
            if [ -n "{{.SOURCE_CHAIN_NUMBER}}" ]; then
              cd "{{.REPO_ROOT}}" && task middleware:deploy-mock PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}" CHAIN_NUMBER="{{.SOURCE_CHAIN_NUMBER}}"
            else
              cd "{{.REPO_ROOT}}" && task middleware:deploy-mock PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}"
            fi
            ;;
          *)
            echo "Unknown DEPLOY_MODE: {{.ACTUAL_DEPLOY_MODE}}. Valid options: LOCAL, MOCK, TESTNET"
            exit 1
            ;;
        esac

  build-empty-service:
    desc: "Build the empty service configuration"
    deps: [clean-service]
    vars:
      SERVICE_JSON_CMD: 'service --json true --home /wavs-home --file "{{.WAVS_CLI_SERVICE_JSON_PATH}}"'
      SOURCE_CHAIN:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-chain-name-{{.SOURCE_CHAIN_NUMBER}}
      SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address
    cmds:
      - |
        cd "{{.REPO_ROOT}}"
        mkdir -p {{.SERVICE_OUTPUT_DIR}}

        task cli:wavs -- {{.SERVICE_JSON_CMD}} init --name {{.COMPONENT_NAME}}

        task cli:wavs -- {{.SERVICE_JSON_CMD}} manager set-evm --chain-name {{.SOURCE_CHAIN}} --address {{.SERVICE_MANAGER_ADDRESS}}

        echo "Service configuration built successfully"

  clean-service:
    desc: "Cleans up the service configuration"
    cmds:
      - rm -rf "{{.SERVICE_OUTPUT_DIR}}"

  upload-service:
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
    cmds:
      - >
        curl --fail-with-body -X POST "{{.WAVS_ENDPOINT}}/save-service" 
        -H "Content-Type: application/json" 
        --data-binary "@{{.SERVICE_JSON_PATH}}"
        -o "{{.TEMP_SERVICE_HASH_JSON_PATH}}"

  set-service-uri:
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
      SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address
      SOURCE_CHAIN_NUMBER: "{{.SOURCE_CHAIN_NUMBER | default 1}}"
      EVM_RPC_URL:
        sh: task get-evm-rpc-url-{{.SOURCE_CHAIN_NUMBER}}
      TEMP_SERVICE_HASH:
        sh: task get-temp-service-hash
      SERVICE_URI: "{{.WAVS_ENDPOINT}}/service-by-hash/{{.TEMP_SERVICE_HASH}}"
    cmds:
      - |
        cast send {{.SERVICE_MANAGER_ADDRESS}} 'setServiceURI(string)' "{{.SERVICE_URI}}" -r {{.EVM_RPC_URL}} --private-key ${DEPLOYER_PRIVATE_KEY}

  register-service:
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
      SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address
      SOURCE_CHAIN_NUMBER: "{{.SOURCE_CHAIN_NUMBER | default 1}}"
      CHAIN_NAME:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-chain-name-{{.SOURCE_CHAIN_NUMBER}}
    cmds:
      - >
        curl --fail-with-body -X POST "{{.WAVS_AGGREGATOR_ENDPOINT}}/register-service" 
        -H "Content-Type: application/json" 
        -d "{
          \"service_manager\": {
            \"evm\": {
              \"chain_name\": \"{{.CHAIN_NAME}}\",
              \"address\": \"{{.SERVICE_MANAGER_ADDRESS}}\"
            }
          }
        }"

  deploy-service:
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
      TEMP_SERVICE_HASH:
        sh: task get-temp-service-hash
      SERVICE_URI: "{{.WAVS_ENDPOINT}}/service-by-hash/{{.TEMP_SERVICE_HASH}}"
    cmds:
      - task cli:wavs -- deploy-service --home /wavs-home --service-url {{.SERVICE_URI}} --wavs-endpoint {{.WAVS_ENDPOINT}}

  register-operator:
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      WAVS_SIGNING_KEY:
        sh: task get-service-signing-address WAVS_INSTANCE="{{.WAVS_INSTANCE}}"
      ACTUAL_DEPLOY_MODE:
        sh: task bootstrap:get-deploy-mode
    cmds:
      - |
        case "{{.ACTUAL_DEPLOY_MODE}}" in
          "LOCAL"|"TESTNET")
            cd "{{.REPO_ROOT}}" && task middleware:register-operator WAVS_SIGNING_KEY="{{.WAVS_SIGNING_KEY}}" AMOUNT="0.001ether" PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}" WAVS_INSTANCE="{{.WAVS_INSTANCE}}"
            ;;
          "MOCK")
            cd "{{.REPO_ROOT}}" && task middleware:set-operator-details WAVS_SIGNING_KEY="{{.WAVS_SIGNING_KEY}}" PROJECT="{{.PROJECT}}" SERVICE_NAME="{{.PROJECT}}" WAVS_INSTANCE="{{.WAVS_INSTANCE}}"
            ;;
          *)
            echo "Unknown DEPLOY_MODE: {{.ACTUAL_DEPLOY_MODE}}. Valid options: LOCAL, MOCK, TESTNET"
            exit 1
            ;;
        esac

  deploy-service-*:
    vars:
      WAVS_INSTANCE: "{{index .MATCH 0}}"
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
      TEMP_SERVICE_HASH:
        sh: task get-temp-service-hash
      SOURCE_WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.SOURCE_CHAIN_NUMBER}}
      SERVICE_URI: "{{.SOURCE_WAVS_ENDPOINT}}/service-by-hash/{{.TEMP_SERVICE_HASH}}"
    cmds:
      - task cli:wavs WAVS_INSTANCE={{.WAVS_INSTANCE}} -- deploy-service --home /wavs-home --service-url {{.SERVICE_URI}} --wavs-endpoint {{.WAVS_ENDPOINT}}

  wavs-*:
    vars:
      WAVS_INSTANCE: "{{index .MATCH 0}}"
    cmds:
      - task bootstrap:components-upload WAVS_INSTANCE="{{.WAVS_INSTANCE}}"
      - task bootstrap:deploy-service-{{.WAVS_INSTANCE}}
      - task bootstrap:register-operator WAVS_INSTANCE="{{.WAVS_INSTANCE}}"

  wavs-all:
    vars:
      FIRST_OPERATOR: "{{.FIRST_OPERATOR | default 1}}"
    cmds:
      - |
        for OPERATOR in $(seq 1 {{.ACTIVE_WAVS_COUNT}}); do
          if [ "$OPERATOR" -ne {{.FIRST_OPERATOR}} ]; then
            task bootstrap:wavs-$OPERATOR
          fi
        done
