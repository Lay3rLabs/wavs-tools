version: "3"

tasks:
  get-component-digest:
    desc: "Get component digest from build artifacts"
    vars:
      COMPONENT: "{{.COMPONENT | default .COMPONENT_NAME}}" # https://github.com/go-task/task/issues/888#issuecomment-1371651627
      COMPONENT_WASM_PATH: '{{joinPath .COMPONENTS_CARGO_RELEASE_DIR (printf "%s.wasm" .COMPONENT)}}'
    requires:
      vars: [COMPONENTS_CARGO_RELEASE_DIR, COMPONENT_NAME]
    cmds:
      - sha256sum "{{.COMPONENT_WASM_PATH}}" | cut -d' ' -f1

  get-temp-service-hash:
    desc: "Get temp service hash from upload response"
    requires:
      vars: [TEMP_SERVICE_HASH_JSON_PATH]
    cmds:
      - jq -r '.hash' "{{.TEMP_SERVICE_HASH_JSON_PATH}}"

  get-service-manager-address:
    desc: "Get service manager address with testnet support"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      MIDDLEWARE_MODE: '{{.MIDDLEWARE_MODE | default "EIGEN_ECDSA"}}'
    requires:
      vars: [REPO_ROOT, PROJECT]
    cmds:
      - cd "{{.REPO_ROOT}}" && task middleware:get-service-manager-address CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.PROJECT}} MIDDLEWARE_MODE={{.MIDDLEWARE_MODE}}

  get-stake-registry-address:
    desc: "Get stake registry address with testnet support"
    vars:
      CHAIN_NUMBER: '{{.CHAIN_NUMBER | default "1"}}'
      MIDDLEWARE_MODE: '{{.MIDDLEWARE_MODE | default "EIGEN_ECDSA"}}'
    requires:
      vars: [REPO_ROOT, PROJECT]
    cmds:
      - cd "{{.REPO_ROOT}}" && task middleware:get-stake-registry-address CHAIN_NUMBER={{.CHAIN_NUMBER}} PROJECT={{.PROJECT}} SERVICE_NAME={{.PROJECT}} MIDDLEWARE_MODE={{.MIDDLEWARE_MODE}}

  get-service-hd-index:
    desc: "Get service HD index from WAVS endpoint"
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      MIDDLEWARE_MODE: '{{.MIDDLEWARE_MODE | default "EIGEN_ECDSA"}}'
      WAVS_ENDPOINT:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-endpoint-{{.WAVS_INSTANCE}}
      SERVICE_MANAGER_ADDRESS:
        sh: task get-service-manager-address MIDDLEWARE_MODE={{.MIDDLEWARE_MODE}}
      CHAIN_NAME:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-chain-name-1
    requires:
      vars: [REPO_ROOT]
    cmds:
      - >
        curl -X POST "{{.WAVS_ENDPOINT}}/services/signer" 
        -H "Content-Type: application/json" 
        -d "{
          \"service_manager\": {
            \"evm\": {
              \"chain\": \"{{.CHAIN_NAME}}\",
              \"address\": \"{{.SERVICE_MANAGER_ADDRESS}}\"
            }
          }
        }" | jq -rc '.secp256k1.hd_index'

  get-service-signing-address:
    desc: "Get service signing address for WAVS instance"
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      HD_INDEX:
        sh: task get-service-hd-index WAVS_INSTANCE={{.WAVS_INSTANCE}}
      OPERATOR_MNEMONIC:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-submission-mnemonic-{{.WAVS_INSTANCE}}
      AVS_SIGNING_ADDRESS:
        sh: cast wallet address --mnemonic "{{.OPERATOR_MNEMONIC}}" --mnemonic-index {{.HD_INDEX}}
    requires:
      vars: [REPO_ROOT]
    cmds:
      - echo "{{.AVS_SIGNING_ADDRESS}}"

  get-service-signing-key:
    desc: "Get service signing address for WAVS instance"
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      HD_INDEX:
        sh: task get-service-hd-index WAVS_INSTANCE={{.WAVS_INSTANCE}}
      OPERATOR_MNEMONIC:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-submission-mnemonic-{{.WAVS_INSTANCE}}
      AVS_SIGNING_KEY:
        sh: cast wallet private-key "{{.OPERATOR_MNEMONIC}}" --mnemonic-index {{.HD_INDEX}}
    requires:
      vars: [REPO_ROOT]
    cmds:
      - echo "{{.AVS_SIGNING_KEY}}"

  get-operator-address:
    desc: "Get the operator's address"
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      OPERATOR_MNEMONIC:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-submission-mnemonic-{{.WAVS_INSTANCE}}
      OPERATOR_ADDRESS:
        sh: cast wallet address --mnemonic "{{.OPERATOR_MNEMONIC}}"
    requires:
      vars: [REPO_ROOT]
    cmds:
      - echo "{{.OPERATOR_ADDRESS}}"

  get-operator-private-key:
    desc: "Get the operator's private key"
    vars:
      WAVS_INSTANCE: "{{.WAVS_INSTANCE | default 1}}"
      OPERATOR_MNEMONIC:
        sh: cd "{{.REPO_ROOT}}" && task backend:get-wavs-submission-mnemonic-{{.WAVS_INSTANCE}}
      OPERATOR_PRIVATE_KEY:
        sh: cast wallet private-key --mnemonic "{{.OPERATOR_MNEMONIC}}" --mnemonic-index 0
    requires:
      vars: [REPO_ROOT]
    cmds:
      - echo "{{.OPERATOR_PRIVATE_KEY}}"
