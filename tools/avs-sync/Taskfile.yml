version: "3"

dotenv: ['../../.env']

includes:
  cli: ../../Taskfile-cli.yml

silent: true

vars:
  COMPONENT_NAME: avs_sync
  COMPONENTS_CARGO_RELEASE_DIR: "{{joinPath .ROOT_DIR \"../../target/wasm32-wasip1/release\"}}"
  ANVIL_PORT: 8548
  EVM_RPC_URL: "http://localhost:{{.ANVIL_PORT}}"
  MIDDLEWARE_NODES_DIR: "{{joinPath .ROOT_DIR \"../../.middleware-nodes\"}}"

tasks:
  components-build:
    desc: "Builds the WASI component for AVS Sync"
    dir: component
    vars:
      COMPONENTS_DIR: "{{.ROOT_DIR}}/.wasi-output"
    cmds:
      - |
        echo "Building component: {{.COMPONENT_NAME}}"
        cargo component build --release
        mkdir -p {{.COMPONENTS_DIR}}
        cp "{{.COMPONENTS_CARGO_RELEASE_DIR}}/{{.COMPONENT_NAME}}.wasm" {{.COMPONENTS_DIR}}/

  components-upload:
    desc: "Uploads the WASI component for AVS Sync"
    vars:
      # here it's relative to docker volume mount, where /wavs-tools is the root of this repo
      COMPONENTS_DIR: "/wavs-tools/tools/avs-sync/.wasi-output"
      DATA_DIR: "/wavs-tools/tools/avs-sync/.wavs-cli-data"
    cmds:
      # unfortunately, the wavs-cli upload-component command doesn't write to JSON
      # but, fortunately, the last line of the output is the digest
      - |
        OUTPUT=$(task cli:upload-component -- "{{.COMPONENTS_DIR}}/{{.COMPONENT_NAME}}.wasm" --data "{{.DATA_DIR}}")
        DIGEST=$(echo "$OUTPUT" | tail -n 1)
        if [[ "$OUTPUT" == *"Digest"* ]]; then
          echo "Component uploaded successfully, digest is $DIGEST"
          echo "$DIGEST" > "./.wasi-output/component_digest.txt"
        else
          echo "Failed to upload component."
          exit 1
        fi

  contracts-deploy:
    desc: "Deploys the AVS Sync contracts"
    dir: contracts
    vars:
      SERVICE_MANAGER_ADDRESS:
        sh: jq -r .addresses.WavsServiceManager "{{.MIDDLEWARE_NODES_DIR}}/avs_deploy.json"
    cmds:
      - |
        echo "Service manager address: {{.SERVICE_MANAGER_ADDRESS}}"
      - echo "TODO, finish the deploy script"
      - forge script script/Deploy.s.sol:DeployAvsWriter --broadcast --rpc-url "{{.EVM_RPC_URL}}" 

  contracts-test:
    desc: "Runs tests for the AVS Sync contracts"
    dir: contracts
    cmds:
      - forge test